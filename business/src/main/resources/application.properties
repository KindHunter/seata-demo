server.port=8082
spring.application.name=dubbo-business


#应用名称
dubbo.application.name = dubbo-account
#优雅停机等待时长（服务端检查是否还有线程是否都已执行结束，消费端检查是否请求的响应都已返回）
dubbo.application.shutwait = 20000
#当业务线程池满时，我们需要知道线程都在等待哪些资源、条件，以找到系统的瓶颈点或异常点。dubbo通过Jstack自动导出线程堆栈来保留现场，方便排查问题,导出间隔10分钟
dubbo.application.dump-directory = /tmp
#服务端口(本地启动每个dubbo provider需要不同的端口)
dubbo.protocol.port = 20880
#dubbo调用协议使用dubbo协议
dubbo.protocol.name = dubbo
#dubbo心跳间隔
#dubbo.protocol.heartbeat=0
#注册中心地址
dubbo.registry.address = redis://127.0.0.1:6379?db.index=8&max.total=100&max.idle=20&min.idle=10&max.active=80&max.wait=10
#注册中心请求超时时间
dubbo.registry.timeout = 5000
#注册中心会话超时时间(毫秒)，用于检测提供者非正常断线后的脏数据，比如用心跳检测的实现，此时间就是心跳间隔，不同注册中心实现不一样。
dubbo.registry.session = 10000
dubbo.registry.username = root
#注册中心不存在时，是否报错
dubbo.registry.check = true
#dubbo消费重试次数设置为0
dubbo.consumer.retries = 0
#启动时, 不检查dubbo provide是否可用
dubbo.consumer.check = false
#dubbo消费超时时间
dubbo.consumer.timeout = 3000
#random,roundrobin,leastactive，分别表示：随机，轮询，最少活跃调用
dubbo.consumer.loadbalance = random
#是否异步执行：否
dubbo.consumer.async = false
#每服务消费者每服务每方法最大并发调用数, 0不限制
dubbo.consumer.actives = 0
#集群方式，可选：failover/failfast/failsafe/failback/forking
dubbo.consumer.cluster = failover
#dubbo消费端校验jsr
dubbo.consumer.validation = false
#是否在afterPropertiesSet()时饥饿初始化引用，否则等到有人注入或引用该实例时再初始化。
dubbo.consumer.init = true
#consumer filter
dubbo.consumer.filter=tracing
#provider filter
dubbo.provider.filter=tracing
#远程服务调用失败重试次数，0不重试
dubbo.provider.retries = 0
#远程服务调用超时时间
dubbo.provider.timeout = 3000
#服务提供者最大可接受连接数 0表示不限
dubbo.provider.accepts = 0
#负载均衡策略random,roundrobin,leastactive，分别表示：随机，轮询，最少活跃调用
dubbo.provider.loadbalance = random
#是否输出接口访问日志
dubbo.provider.accesslog = false
#集群方式，可选：failover/failfast/failsafe/failback/forking
dubbo.provider.cluster = failover
#通过令牌验证在注册中心控制权限，以决定要不要下发令牌给消费者，可以防止消费者绕过注册中心访问提供者, 为true随机token令牌，使用UUID生成，也可以自己设定
#dubbo.provider.token = true
#服务是否动态注册，如果设为false，注册后将显示后disable状态，需人工启用，并且服务提供者停止时，也不会自动取消册，需人工禁用。
dubbo.provider.dynamic = true
dubbo.protocol.payload = 8388608


seata.enabled=true
seata.data-source-proxy-mode=XA
seata.application-id=business-service
seata.tx-service-group=my_test_tx_group
seata.client.rm.async-commit-buffer-limit=1000
seata.client.rm.report-retry-count=5
seata.client.rm.table-meta-check-enable=false
seata.client.rm.report-success-enable=false
seata.client.rm.lock.retry-interval=10
seata.client.rm.lock.retry-times=30
seata.client.rm.lock.retry-policy-branch-rollback-on-conflict=true
seata.client.tm.commit-retry-count=5
seata.client.tm.rollback-retry-count=5
seata.client.undo.data-validation=true
seata.client.undo.log-serialization=jackson
seata.client.undo.log-table=undo_log
seata.client.log.exceptionRate=100
seata.service.vgroup-mapping.my_test_tx_group=default
seata.service.grouplist.default=127.0.0.1:8091
seata.transport.shutdown.wait=3
seata.transport.thread-factory.boss-thread-prefix=NettyBoss
seata.transport.thread-factory.worker-thread-prefix=NettyServerNIOWorker
seata.transport.thread-factory.server-executor-thread-prefix=NettyServerBizHandler
seata.transport.thread-factory.share-boss-worker=false
seata.transport.thread-factory.client-selector-thread-prefix=NettyClientSelector
seata.transport.thread-factory.client-selector-thread-size=1
seata.transport.thread-factory.client-worker-thread-prefix=NettyClientWorkerThread
seata.transport.thread-factory.worker-thread-size=default
seata.transport.thread-factory.boss-thread-size=1
seata.transport.type=TCP
seata.transport.server=NIO
seata.transport.heartbeat=true
seata.transport.serialization=seata
seata.transport.compressor=none
seata.transport.enable-client-batch-send-request=true
seata.config.type=file
seata.registry.type=file


#zipkin
spring.zipkin.base-url=http://localhost:9411
spring.zipkin.service.name=business-service
#使用默认 http 方式收集 span 需要配置此项
spring.zipkin.sender.type=web
#设置采样率默认为 0.1 注意之前的版本是percentage 新版本中更换为 probability
spring.sleuth.sampler.probability=1
spring.zipkin.enabled=true


